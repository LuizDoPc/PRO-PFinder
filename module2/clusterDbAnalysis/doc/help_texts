o----------------------------------------------------------------------------------------------------------o
|                                       COMMAND-LINE FUNCTIONS                                             |
o----------------------------------------------------------------------------------------------------------o

*--------------------------------------------------------------------------------------------------------------------------*

addItepIdsToGenbank.py

Usage: addItepIdsToGenbank.py genbank_file raw_file output_file

Takes an existing Genbank file and a tab-delimited raw file (from the raw/
folder) and adds to it a db_xref for 'ITEP' that contains ITEP IDs

Options:
  -h, --help      show this help message and exit
  -t, --truncate  Replace contig IDs with IDs less than 16 characters so that
                  biopython can write the genbank file. The original ID will
                  be saved as a db_xref. (D: Dont - but the function will fail
                  if any contig IDs are larger than 16 characters
  -b, --tblfile   Specify this option if instead of a RAW file you are using
                  the 'tbl' file from RAST tarball ($basedir/Features/peg/tbl)
*--------------------------------------------------------------------------------------------------------------------------*

annoteSeq2Fasta.py

Usage: annoteSeq2Fasta.py [options] < gene_seq_table > fasta_file

Turn a table containing gene IDs, annotations, and sequences into a FASTA
file. By default, the input file is a 'geneinfo' file from one of the
functions db_getGeneInformation.py or db_getClusterGeneInformation.py

Options:
  -h, --help            show this help message and exit
  -g GENEIDCOL, --geneid=GENEIDCOL
                        Column number (start from 1) for gene id (D:1)
  -a ANNOTECOL, --annote=ANNOTECOL
                        Column number (start from 1) for annotation / FASTA
                        header (optional, by default no annotation is
                        included)
  -s SEQCOL, --seqcol=SEQCOL
                        Column number (start from 1) for sequence column (D:12
                        - corresponds to the location in a geneinfo file)
*--------------------------------------------------------------------------------------------------------------------------*

Blast_all_v_all.py

Usage: Blast_all_v_all.py [options] Fasta_dir Results_dir Ncores

Automatically make blast databases for all files in fasta_dir  (must have .faa
or .fasta extension) in parallel using ncores processers, and  store results
in results_dir

Options:
  -h, --help            show this help message and exit
  -n, --blastn          Perform BLASTN rather than BLASTP (D: BlastP). Runs
                        actual BLASTN, not MEGABLAST.
  -e EVALUE, --evalue=EVALUE
                        E-value cutoff for BLAST (D: 1E-5).
*--------------------------------------------------------------------------------------------------------------------------*

blastResultsToDistanceMatrix.py

Usage: blastResultsToDistanceMatrix.py [options] < BLAST_results > distance_matrix

Turn a table of BLAST results into a distance matrix. The distance matrix will
be suitable for conversion into a heatmap with plotHeatmap.py It is suggested
that the user use this with the results of
db_getBlastResultsBetweenSpecificGenes.py so that there are blast results
available for ALL pairs of genes in a specified list.

Options:
  -h, --help            show this help message and exit
  -m METHOD, --method=METHOD
                        Scoring metric to use (D=maxbit). OK methods: pctid
                        logevalue minbit maxbit
  -d DEFAULT, --default=DEFAULT
                        Default score to use in case of missing pairs. (D:
                        None)
*--------------------------------------------------------------------------------------------------------------------------*

catAlignments.py

Usage: catAlignments.py [options] alignment_path > concatenated_alignment

Concatinate all FASTA alignments in alignment_path. All alignments must have
exactly one represenative from each organism and all must have representatives
from the same set of organisms.

Options:
  -h, --help         show this help message and exit
  -k KEY, --key=KEY  Pattern to match (by regex) in any files you want to use,
                     e.g. a run ID (default: use all files in alignment_path)
*--------------------------------------------------------------------------------------------------------------------------*

countClusters.py

Usage: countClusters.py < cluster_file > counts

Generate counts of the number of elements of each cluster from the MCL output
file that has all the elements of one cluster in each row

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

db_addOrganismNameToTable.py

Usage: db_addOrganismNameToTable.py [options] < table_with_gene_ids > table_with_organism_added

Output table: (original_row) organism_id [gene_annotation]

Add the organism name to a tab-delimited file containing gene IDs.
Optionally, add annotations as well.

Options:
  -h, --help            show this help message and exit
  -g GENECOL, --genecol=GENECOL
                        Column number for gene IDs starting from 1 (D=1)
  -a, --annotate        Also add annotation (D=False)
*--------------------------------------------------------------------------------------------------------------------------*

db_bidirectionalBestHits.py

Usage: db_bidirectionalBestHits.py [options] > BBH_table

Return a list of bidirectional best blast hits based on the specified scoring
criteria. Output table has (tab-delimited): Query gene, target gene, query
genome, forward score, backward score

Options:
  -h, --help            show this help message and exit
  -m METHOD, --method=METHOD
                        Scoring metric to use to define best hit (D=evalue).
                        Defined methods: evalue maxbit minbit
  -r RUNID, --runid=RUNID
                        Get bidirectional best BLAST hits for organisms in
                        this cluster run only (D: Get them for all organisms
                        in the database)
  -f ORGFILE, --orgfile=ORGFILE
                        File containing s list of organisms to which to limit
                        search. Use "-" for stdin. Cannot use with -r. (D: Get
                        hits between all organisms in the database)
  -o OC, --orgcol=OC    Column number for organism ids (ignored unless -f is
                        specified), starting from 1 (D=1)
*--------------------------------------------------------------------------------------------------------------------------*

db_compareClusters.py

Usage: db_compareClusters.py RUNID1 RUNID2 > comparison_file

Output table: run_id_1 cluster_id_1 run_id_2 cluster_id_2 common_genes genes_only_cluster_1 genes_only_cluster_2

Generates a file comparing each overlapping pair of clusters between  the two
specified clustering runs. The tab-delimited file has one row for each
overlapping  pair of clustersm, and the overlapping and non-overlapping genes
are specified.

Options:
  -h, --help        show this help message and exit
  -i, --includeall  If specified, include organisms not in common between the
                    two runs as non-overlapping genes.  The default is to omit
                    those genes (only genes found in both specified cluster
                    runs are printed)
*--------------------------------------------------------------------------------------------------------------------------*

db_displayExternalClusterHits.py

No module named MySQLdb
Usage: db_displayExternalClusterHits.py [options] < gene_id_list

 Use Biopython to display the hits to external clusters (via RPSBLAST) mapped
onto a protein or a list of proteins. You have to run setup_step4.sh before
this function will work.

Options:
  -h, --help            show this help message and exit
  -d DATABASE, --database=DATABASE
                        Only display hits for this database (e.g. PFAM, COG,
                        cd, ...) (D: Show all of them in separate rows above
                        the gene)
  -e EVALUE, --evalue=EVALUE
                        E-value cutoff for hits to display (D:1E-5)
  -g GC, --geneocl=GC   Column number for gene ID, starting from 1 (D=1)
  -o OUTDIR, --outdir=OUTDIR
                        Output directory for all of the PNG files for the
                        input genes (D: externalHitGraphics)
  -s, --showevalue      Show E-value for RPSBLAST hits along with the names
                        (D: Show names only)
  -m MAXHITS, --maxhits=MAXHITS
                        Maximum number of hits to display on the figure (D:Not
                        limited). Try this if the figure gets too messy.
*--------------------------------------------------------------------------------------------------------------------------*

db_displayTree.py

Usage: db_displayTree.py (-s -b basename|-p -b basename|-n -b basename|-d) [options] Newick_file

Display a tree with annotations and specified root and formats. There is no
default acticity; one of -s, -p, -n, or -d must be specified..

Options:
  -h, --help            show this help message and exit
  -d, --display         Display result
  -s, --savesvg         Convert the file to svg (requires -b)
  -p, --savepng         Convert the file to png (requires -b, implies -s)
  -n, --savenewick      Save re-rooted tree as a newick file (requires -b)
  -b BASENAME, --basename=BASENAME
                        Base name for file outputs (ignored without -s or -p)
  -t, --no_bootstraps   Omit bootstrap values when drawing tree.
  -r ROOTGENE, --rootgene=ROOTGENE
                        Root on this gene (default = keep same root as nwk
                        file).
  -o ROOTORG, --rootorg=ROOTORG
                        Root on this organism ID (e.g. 83333.1) (default =
                        keep same root as nwk file)
  -f DATAFILE, --data_file=DATAFILE
                        Table of _numeric_ data with gene ID (leaf name, which
                        must match the leaf names in the newick file exactly)
                        on the first column and data to attach to the leaves
                        on the rest.  Note that the first row must look like
                        this: #names [column_label1] [column_label2] ...  Do
                        not make a column label for the leaf name column. The
                        #names is just a place holder -  but the ETE parser
                        will fail without it. The ETE parser will also fail
                        without a label row with the right number of entries!
  -w DATA_WIDTH, --data_width=DATA_WIDTH
                        Desired width of each data point on a heatmap (only
                        valid with -f, default = 60)
  -m TEXTFILE, --data_textfile=TEXTFILE
                        Table of _arbitrary text__ data with gene ID (leaf
                        name, which must match the leaf names in the newick
                        file exactly) on the first column and data to attach
                        to the leaves on the rest. See -f text for file format
                        to use.
  -z FONTSIZE, --fontsize=FONTSIZE
                        (only with -m) Font size for arbitrary text.
*--------------------------------------------------------------------------------------------------------------------------*

db_dumpAllFasta.py

Usage: db_dumpAllFasta.py > Fasta_file

Generates a fasta file with all the annotations in the database including
aliases added to the raw annotations...

Options:
  -h, --help        show this help message and exit
  -n, --nucleotide  Make nucleotide fasta file (D: Protein)
*--------------------------------------------------------------------------------------------------------------------------*

db_evaluateReactionsFromGpr.py

Usage: db_evaluateReactionsFromGpr.py -g GPR_file -i RunID [options] > Evaluated_GPR_table

Output table: rxn_id (Evaluation_org1) (Evaluation_org2) ...

This function takes a two-column table containing gene protein reaction
relationships (GPR) as input and produces a table telling whether the reaction
is present in each organism in a given cluster run based on the
presencebsence of individual genes from the clustering results (or
optionally, it gives you the GPR for each other organism in the cluster run
instead).  The GPR_file should have exactly two columns: * A column of
reaction IDs (first column), and * A column of Gene-protein relationships
[I.E. "GeneX and GeneY"] (second column).  This function will only work if the
gene IDs in the GPR file are ITEP IDs. See replaceAliasesWithGeneNames.py for
something that might help achieve this.

Options:
  -h, --help            show this help message and exit
  -g GPRFILE, --gprfile=GPRFILE
                        GPR file (required, D=None)
  -i RUNID, --runid=RUNID
                        Run ID to use to identify presencebsence of genes
                        (requried, D=None)
  -o, --or              Replace all AND in the input GPR with OR (useful for
                        diagnosing issues with missing subunits). D = False,
                        evaluate as written
  -n, --newgpr           Instead of returning 0 and 1, return the new GPR in
                        the other organisms.  Any gene in the GPR that is not
                        present is replaced with NONE.
  -a, --showabsence      Replace old GPR with new GPR only if the reaction is
                        present, and otherwise replace the whole GPR string
                        with ABSENT.
*--------------------------------------------------------------------------------------------------------------------------*

db_findBadMutationsFromTblastn.py

Usage: db_findBadMutationsFromTblastn.py [options] < TBLASTN_output > bad_mutation_list

Given a TBLASTN output from db_TBlastN_wrapper, attempt to automatically
identify frameshifts and fragments of the same gene that appear on separate
lines.  The criteria for a frameshift is if the TBLASTN interval is on the
same strand in different frames in two differnet hits and they are within
INTERVAL base pairs of each other.  The criteria for a nonsense mutation is if
a single hit has an internal stop codon.  The criteria for an insertion is if
there are two hits within INTERVAL base pairs of each other.  All of these
require manual curation to ensure that alternative causes such as gene
duplications and two distantly-related but close-proximity genes are not the
cause for the observed anomolies.  This function only works if we can access
the database and pull out contigs. It won't work for TBLASTN results from
arbitrary fastn files

Options:
  -h, --help            show this help message and exit
  -i INTERVAL, --interval=INTERVAL
                        Interval between two consecutive hits within which we
                        will assume that the two hits belong to the same
                        ancestral gene (D=1000 basepairs)
  -n NONSENSE_PCT, --nonsense_pct=NONSENSE_PCT
                        Only report nonsense mutations if more than -n percent
                        of the amino acids in the homnologous regions are
                        found after the stop codon (cut off) (D = 0: report
                        any stop codons that are found)
  -f, --falsepositives  Print very likely false positive issue identifications
                        (multiple TBLASTN hits with exactly the same
                        coordinates) - default is to ignore them
*--------------------------------------------------------------------------------------------------------------------------*

db_findClustersByOrganismList.py

Usage: db_findClustersByOrganismList.py (-a|-n|-p|-s|-y) [options] run_id < organism_names > cluster_run_id_list

Output: runid clusterid

Find clusters with a paritcular quality relative to the list of organisms you
specified. Note: To find conserved gene clusters use -a To find core gene
clusters for a particular group, use both -a and -u To find core genes only in
a parituclar group (to the exclusion of all the others in that cluster run),
use -a, -u, and -s To find clusers that exclude all the specified organisms
use -n Using only -u or various contradictory combinations will result in an
error.

Options:
  -h, --help            show this help message and exit
  -a, --all             Only include clusters that have at least one
                        representative in ALL of the specified organisms
  -y, --any             Only include clusters that have at least one
                        representative in AT LEAST ONE of the specified
                        organisms
  -s, --only            Only include clusters that ONLY has matches in the
                        specified organisms
  -n, --none            Only include clusters that have DOES NOT have a
                        representative in the specified organisms
  -u, --uniq            Only include clusters that contain exactly ONE
                        representative in any matching organisms (D: Any
                        number)
  -o OC, --orgcol=OC    Column number for organism starting from 1 (D=1)
  -r, --sanitized       If specified, the names in the input file have been
                        sanitized (with sanitizeString.py) (D: False)
  -p PCT_CUTOFF, --pct_cutoff=PCT_CUTOFF
                        Percentage of organisms in the specified list of
                        organisms that must have a member to be included
                        (incompatible with -a, -y, and -n but can be used with
                        -s)
*--------------------------------------------------------------------------------------------------------------------------*

db_getAlignmentBetweenGenes.py

Usage: db_getAlignmentBetweenGenes.py [options] < gene_list > alignment

Get a quick and dirty (whole-gene) alignment between  a set of genes of
interest piped from stdin. Runs the alignment using mafft with the --auto and
--reorder flags. Does not do any trimming. To get a nucleotide alignment you
can run MAFFT with the nucleotides directly (-n) or align the proteins and
then uses the PAL2NAL package available at
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1538804/ (-l or --pal2nal)
Aligning the proteins first should give more accuracy and allow calculations
of DN\DS and other such parameters.

Options:
  -h, --help           show this help message and exit
  -g GC, --genecol=GC  Column number for gene starting from 1 (D=1)
  -p, --phylip         Output alignment as PHYLIP (D: FASTA)
  -k, --keep           Keep temporary files (D: Delete them)
  -n, --nucleotide     Make a nucleotide rather than an amino acid alignment.
                       Runs MAFFT directly on nucleotide sequenced. (D: Amino
                       acids)
  -l, --pal2nal        Make a nucleotide alignment by first making an AA
                       alignment then reverse-translating using PAL2NAL (D:
                       Amino acids)
*--------------------------------------------------------------------------------------------------------------------------*

db_getAllBlastResults.py

Usage: db_getAllBlastResults.py > all_blast_results

Print all blast results available in the database (without further filtering)

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

db_getAllClusterRuns.py

Usage: db_getAllClusterRuns.py > run_id_list

Return list of all run IDs from the database

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

db_getAllClustersSpecRun.py

Usage: db_getAllClustersSpecRun.py [options] < run_ids > cluster_runs

Given a set of run IDs (from stdin), returns all cluster IDs associated with
that run ID

Options:
  -h, --help          show this help message and exit
  -r RC, --runcol=RC  Column number for run ID (start from 1, D=1)
*--------------------------------------------------------------------------------------------------------------------------*

db_getBlastResultsBetweenSpecificGenes.py

Usage: db_getBlastResultsBetweenSpecificGenes.py [options] < gene_ids > blast_results

Given list of genes to match, returns a list of BLAST results between genes in
the list only

Options:
  -h, --help            show this help message and exit
  -g GENECOLUMN, --gcolumn=GENECOLUMN
                        Column number (start from 1) for gene ID
  -n, --blastn          Get BLASTN results (D: BLASTP results)
*--------------------------------------------------------------------------------------------------------------------------*

db_getBlastResultsBetweenSpecificOrganisms.py

Usage: db_getBlastResultsBetweenSpecificOrganisms.py "Organism 1" "Organism 2" ... > blast_results

Given list of organism names to match, returns a list of BLAST results between
organisms matching any of those keywords.

Options:
  -h, --help    show this help message and exit
  -s, --strict  Require exact name matches for organisms (D: Partial name
                matches are OK)
  -n, --blastn  Return BLASTN hits rather than BLASTP hits. (D: BLASTP)
*--------------------------------------------------------------------------------------------------------------------------*

db_getBlastResultsContainingGenes.py

Usage: db_getBlastResultsContainingGenes.py [options] < gene_ids > blast_results

Given list of genes to match, returns a list of BLAST results containing any
gene ID in your list as either a query or a target (for blast results only
BETWEEN the query genes, see db_getBlastResultsBetweenSpecificGenes.py)

Options:
  -h, --help            show this help message and exit
  -g GENECOLUMN, --gcolumn=GENECOLUMN
                        Column number (start from 1) for gene ID
  -c CUTOFF, --cutoff=CUTOFF
                        E-value cutoff (D: Show all results in database)
  -n, --blastn          Base the results on BLASTN instead of BLASTP (D:
                        BLASTP)
  -o, --onlyquery       Only return results for which one of the specified
                        genes is the query (by default returns results whether
                        it is a query or a target
*--------------------------------------------------------------------------------------------------------------------------*

db_getClusterGeneInformation.py

Usage: db_getClusterGeneInformation.py [options] < runid_clusterid_table > cluster_gene_info

Output table: organism_name contig_id start stop strand strandnum annotation DNA_seq AA_seq run_id cluster_id

Given a list of run ID / cluster ID pairs (one pair in each row of the input
table),  get a list of gene information for each gene in each of the input
clusters. The results include organism, strand, location, contig, and
sequences (and the run\clusterID to which the gene belongs)

Options:
  -h, --help            show this help message and exit
  -r RUNCOLUMN, --rcolumn=RUNCOLUMN
                        Column number (start from 1) for run ID
  -c CLUSTERCOLUMN, --ccolumn=CLUSTERCOLUMN
                        Column number (start from 1) for cluster ID
*--------------------------------------------------------------------------------------------------------------------------*

db_getClustersContainingGenes.py

Usage: db_getClustersContainingGenes.py [options] < gene_ids > clusters_containing_genes

Given a list of gene IDs, gets a list of clusters containing those genes (in
all run IDs)

Options:
  -h, --help            show this help message and exit
  -g GENECOLUMN, --gcolumn=GENECOLUMN
                        Column number (start from 1) for gene ID
  -r RUNID, --runid=RUNID
                        Restrict results to the given run ID
*--------------------------------------------------------------------------------------------------------------------------*

db_getClustersWithAnnotation.py

Usage: db_getClustersWithAnnotation.py [options] "Annotation 1" "Annotation 2" ... < run_ids > clusters_with_genes_containing_annotation_words

Given list of run IDs, returns a list of genes and clusters containing given
word(s) in the annotation - separate inputs are combined with OR statements

Options:
  -h, --help          show this help message and exit
  -r RC, --runcol=RC  Column number for run ID, starting from 1 (D=1)
*--------------------------------------------------------------------------------------------------------------------------*

db_getClustersWithNumGenes.py

Usage: db_getClustersWithNumGenes.py -n numgenes [options] < run_ids > clusters_with_specified_num_genes

Get all of the clusters with the specified number of genes in the specified
cluster runs

Options:
  -h, --help            show this help message and exit
  -r RUNCOLUMN, --rcolumn=RUNCOLUMN
                        Column number (start from 1) for run ID
  -n NUMCLUSTER, --numcluster=NUMCLUSTER
                        Desired number of genes in each cluster to extract
*--------------------------------------------------------------------------------------------------------------------------*

db_getClustersWithSamePAPattern.py

Usage: db_getClustersWithSamePAPattern.py [options] < runid_clusterid_pair > same_clusters

Generate a list of clusters with the same organism presence/absence pattern as
the specified cluster/runID pair Only looks in the same run as specified, and
does not account for the number of genes present in each organism.

Options:
  -h, --help            show this help message and exit
  -r RC, --runcol=RC    Column number for run ID starting from 1 (D=1)
  -c CC, --clustercol=CC
                        Column number for cluster ID starting from 1 (D=2)
*--------------------------------------------------------------------------------------------------------------------------*

db_getContigSeqs.py

Usage: db_getContigSeqs.py [options] < contig_ids > contig_sequences

Get the complete DNA sequence for contigs with specified IDs.

Options:
  -h, --help            show this help message and exit
  -f, --fasta           Return sequences as FASTA file (the default is a two-
                        column table)
  -c CC, --contigcol=CC
                        Column number for contig ID, starting from 1 (D;1)
*--------------------------------------------------------------------------------------------------------------------------*

db_getContigs.py

Usage: db_getContigs.py [options] > contig_ids

Get contig IDs.  By default returns ALL contig IDs. Optionally return contigs
only for specific organisms.

Options:
  -h, --help            show this help message and exit
  -i ORGANISMID, --organismid=ORGANISMID
                        Only return contigs for organisms matching this
                        organism ID
  -o ORGANISM, --organism=ORGANISM
                        Only return contigs with the specified organism name
  -s SANITIZED, --sanitized=SANITIZED
                        Specify this if the organism's name is sanitized
*--------------------------------------------------------------------------------------------------------------------------*

db_getEquivalentGenesInOrganism.py

Usage: 
db_getEquivalentGenesInOrganism.py runID -n 'organism_name' < gene_list > equivalent_genes
db_getEquivalentGenesInOrganism.py runID -i 'organism_id'   < gene_list > equivalent_genes


Given a list of genes and an organism name or ID, identifies all genes in the
same cluster as the target genes in the specified organism.  Returns a two-
column table containing the list of genes in the first column and the
equivalent gene IDs in the other organism separated by semicolons in the
second.  Note that the order of the output is not necessarily the same as the
order of the input.

Options:
  -h, --help            show this help message and exit
  -n ORGNAME, --name=ORGNAME
                        Name of target organism.
  -i ORGID, --id=ORGID  Organism ID for target organism.
  -g GC, --genecol=GC   Column number for gene Id starting from 1 (D:1)
*--------------------------------------------------------------------------------------------------------------------------*

db_getExternalClusterGroups.py

Usage: db_getExternalClusterGroups.py [options] < gene_id_list > External_cluster_ids

Supported databases: all cd cog pfam tigr prk smart

Given a list of gene IDs, identifies the external cluster IDs that are
homologous to those gene IDs as determined by RPSBLAST. By default returns all
of the results - given a specific database to look at, will only return
results from that database.

Options:
  -h, --help            show this help message and exit
  -d DATABASE, --database=DATABASE
                        Return only results from the specified database. (D:
                        return all of them). The options are: all cd cog pfam
                        tigr prk smart
  -a, --adddescription  Add external cluster description to the table (D:
                        dont)
  -n, --addname         Add external cluster name to the table (D: dont)
  -g GC, --genecol=GC   Column number for gene ID starting from 1 (D: 1)
*--------------------------------------------------------------------------------------------------------------------------*

db_getExternalClustersByDescription.py

Usage: db_getExternalClustersByDescription.py [Options] "Description 1" "Description 2" ...

Output table:  cdd_id external_clusterid clustername description profile_length

Identify external clusters (optionally in a specific database) that match a
specified description. If more than one description is provided, return all
clusters matching at least one description.

Options:
  -h, --help            show this help message and exit
  -d DATABASE, --database=DATABASE
                        External clustering database to search. Default: all
                        those in NCBI CDD. Valid options are: all cd cog pfam
                        tigr prk smart
*--------------------------------------------------------------------------------------------------------------------------*

db_getExternalClustersById.py

Usage: db_getExternalClustersById.py [options] < external_clusterids > descriptions

Get descriptions of external clusters described by the specified external
clusterIDs

Options:
  -h, --help            show this help message and exit
  -c IDC, --column=IDC  Column number (starting from 1) for the external
                        cluster ID (D=1)
*--------------------------------------------------------------------------------------------------------------------------*

db_getGeneInformation.py

Usage: db_getGeneInformation.py [options] < gene_ids > gene_info

Output table: organism_name contig_id start stop strand strandnum annotation DNA_seq AA_seq

Given a list of gene IDs, get their gene info,  including annotations, contig,
organism, strand, and sequences.  Start is the first nucleotide of the start
codon (e.g. A in ATG) and stop is the last nucleotide, relative to nucleotide
1 at the start of the contig.

Options:
  -h, --help            show this help message and exit
  -g GENECOLUMN, --gcolumn=GENECOLUMN
                        Column number (start from 1) for gene ID
  -a, --add             Add gene information to the end of the existing file
                        (D: only return the gene information)
*--------------------------------------------------------------------------------------------------------------------------*

db_getGeneNeighborhoods.py

Usage: db_getGeneNeighborhoods.py [options] < gene_id_list > gene_neighborhoods

Output: querygene neighbor_gene gene_distance contig start_location strand annotation

Given a list of gene IDs, get the neighborhoods within the specified  number
of genes on the same contig on either strand from the specified gene. Note
that start location is always the first base of a start codon (so start > stop
for - strand genes).

Options:
  -h, --help            show this help message and exit
  -n NSIZE, --neighborhood=NSIZE
                        Size of desired neighborhood in number of genes from
                        center (maximum of 5, D=3)
  -g GC, --genecol=GC   Column number starting from 1 for gene ID (D=1)
*--------------------------------------------------------------------------------------------------------------------------*

db_getGenesInClusters.py

Usage: db_getGenesInClusters.py [options] < runid_clusterid_table > gene_id_list

Output table: run_id cluster_id gene_id

Given a list of run IDs and cluster IDs,  returns a list of all genes present
in those run ID \ cluster ID pairs

Options:
  -h, --help            show this help message and exit
  -r RUNCOLUMN, --rcolumn=RUNCOLUMN
                        Column number (start from 1) for run ID
  -c CLUSTERCOLUMN, --ccolumn=CLUSTERCOLUMN
                        Column number (start from 1) for cluster ID
*--------------------------------------------------------------------------------------------------------------------------*

db_getGenesInRegion.py

Usage: db_getGenesInRegion.py [options] < contig_and_gene_locations > geneinfo

 This function takes a table with contig and regions (start and stop) as
inputs and identifies all of the genes between the start and stop columns (by
default, the entire  gene must be between the start and stop). It returns the
geneinfo for the genes within the specified regions. The defaults are set up
to take a TBLASTn results file from the ITEP TBLASTn wrapper as input

Options:
  -h, --help            show this help message and exit
  -c CONTIGCOL, --contigcol=CONTIGCOL
                        Column number for the contig to search, starting from
                        1 (D=3)
  -s STARTCOL, --startcol=STARTCOL
                        Column number for the start of the region to search,
                        starting from 1 (D=5)
  -e ENDCOL, --endcol=ENDCOL
                        Column number for the end of the region to search,
                        starting from 1 (D=6)
  -v OVERHANG, --overhang=OVERHANG
                        Allow this number of amino acids to hang over the edge
                        of the expanded region by this many nucleotides (D: 0
                        - the entire gene must lay in the region)
  -x EXPAND, --expand=EXPAND
                        Expand the gene regions by this many nucleotides
                        before searching (D: 0 - use regions as provided).
                        Note that the genes returned can then fall entirely
                        outside the originally-provided region.
*--------------------------------------------------------------------------------------------------------------------------*

db_getGenesWithAnnotation.py

Usage: db_getGenesWithAnnotation.py "Annotation 1" "Annotation 2" ... > [Gene_id_list]

Get a list of genes in the database matching at least one of the specified
annotations (Note - does not have to match ALL of them)

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

db_getHitsToExternalClusters.py

Usage: db_getHitsToExternalClusters.py [options] < external_clusterids > similarities

Output: querygene cdd_id pctid alnlen mismatches gapopens querystart queryend substart subend evalue bitscore

Given a list of external clusterIDs (from cog, pfam, tigrfam...), attempts to
identify proteins in the database that are homologous (by RPSBLAST) to the
profile implied by those clusters, and returns them and their E-values.

Options:
  -h, --help            show this help message and exit
  -c ECC, --column=ECC  Column number for external cluster ID (D=1)
  -e EVALUE, --evalue=EVALUE
                        Evalue cutoff (D: 1E-5, the cutoff used to originally
                        generate the data)
*--------------------------------------------------------------------------------------------------------------------------*

db_getItepRoot.py

Usage: db_getItepRoot.py

Get the current root directory of the TIEP repository

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

db_getOrganismsInCluster.py

Usage: db_getOrganismsInCluster.py [options] < runid_clusterid_pair > organism_list

Get a list of organisms included in the specified run / cluster ID pair

Options:
  -h, --help            show this help message and exit
  -r RC, --runcol=RC    Column number for run ID starting from 1 (D=1)
  -c CC, --clustercol=CC
                        Column number for cluster ID starting from 1 (D=2)
*--------------------------------------------------------------------------------------------------------------------------*

db_getOrganismsInClusterRun.py

Usage: db_getOrganismsInClusterRun.py [options] < runid > organism_list

Get a list of organisms included in each piped-in cluster run  (Note - the
results are most useful if you only provide ONE)

Options:
  -h, --help          show this help message and exit
  -r RC, --runcol=RC  Column number for run ID starting from 1 (D=1)
*--------------------------------------------------------------------------------------------------------------------------*

db_getPresenceAbsenceTable.py

Usage: db_getPresenceAbsenceTable.py [options] > presence_absence_table

Generates a presence - absence table (or slices thereof) based on the one
automatically loaded as part of setup_step2.sh.  Default activity is to dump
the database as is (pegs).

Options:
  -h, --help            show this help message and exit
  -n, --number          Rather than printing PEGs, print the number of
                        representatives in each organism (D: Prints pegs)
  -b, --binary          Rather than printing PEGs, print 0 if there are no
                        representatives and 1 if there are representatives (D:
                        prints pegs)
  -r RUNID, --runid=RUNID
                        Only print results for the specified run ID (D: Print
                        the results for all of them)
  -c CLUSTERID, --clusterid=CLUSTERID
                        Only print results for the specified cluster ID (D:
                        Prints the table for all of them)
  -t TREEORDER, --treeorder=TREEORDER
                        Given a newick file with the SAME organism names as
                        the presencebsence table, orders the columns to
                        conform with the tree (D: no ordering)
  -u, --useronly        WARNING: HACKY and Requires setup_step5 to have been
                        run.  Only return those genes that were provided by
                        the user (it is assumed that only ITEP genes match
                        fig|\d+\.\d+\.peg\.\d+).
  -i, --iteponly        WARNING: HACKY and Requires setup_step5 to have been
                        run.  Only return genes originating from ITEP (it is
                        assumed that only ITEP genes match
                        fig|\d+\.\d+\.peg\.\d+).
*--------------------------------------------------------------------------------------------------------------------------*

db_getSequencesFromBlastResults.py

Usage: db_getSequencesFromBlastResults.py [options] < table > table_with_sequences

Identify the sequence of the HSP based on the provided ID (contig or gene) and
the start and stop locations of the HSP.  The user must specify one of -p, -n,
and -c - it gets too ambiguous otherwise (especially between -p and -n). This
tells the program what type of data to use to obtain the result.  -p is for
BLASTP results, -n is for BLASTN results against genes, and -c is for getting
the sequence for a certain location on a contig from BLASTN\TBLASTN results.
For DNA sequences, start < stop is assumed to mean + strand and stop < start
means - strand.  If the "translate DNA" (-t) option is specified, it will pull
out the DNA sequence, do the reverse-complement if necessary, and then
translate that.

Options:
  -h, --help            show this help message and exit
  -n, --nucleotide      Specify this flag if the piped-in locations are on
                        _genes_ (i.e. BLASTN vs genes rather than BLASTP
                        against proteins)
  -c, --contig          Specify this flag if the piped-in locations are on a
                        _contig_ (i.e. from BLASTN or TBLASTN vs the whole
                        contig)
  -p, --protein         Specify this flag is the piped-in locations are within
                        a _protein_ sequence
  -i IDCOL, --idcol=IDCOL
                        Column number for ID to use starting from 1 (D: 2 as
                        from BLASTP or BLASTN - use 3 for TBLASTN)
  -s STARTCOL, --startcol=STARTCOL
                        Column number for start location to use - NOTE this
                        will be different from the default for TBLASTN results
                        (D: 9 - target start location for BLASTP and BLASTN.
                        Use 5 for TBLASTN)
  -e ENDCOL, --endcol=ENDCOL
                        Column number for end \ stop location to use - NOTE
                        this will be different from the default for TBLASTN
                        results (D: 10 - target stop location for BLASTP and
                        BLASTN. Use 6 for TBLASTN)
  -t, --translate_dna   Given a set of options that would result in a DNA
                        sequence, translate that sequence and return the
                        translated sequence instead. (D: If relevant, just
                        returns the DNA sequence) - WARNING: Do not use for
                        BLASTN since it can cause issues with translation
                        frame! Use for TBLASTN only
*--------------------------------------------------------------------------------------------------------------------------*

db_getUpstreamRegion.py

Usage: db_getUpstreamRegion.py [options] < geneids > geneids_with_upstream

Output table: geneid status upstream_sequence

Get the upstream nucleotide sequence of the given set of genes. Requires you
to have the contigs loaded into the database. It is careful to only print
sequences up to the next called gene or gap (N) in the sequence unless you
tell it not to. This is because upstream regions are often used to search for
motifs but motifs may be hard to distinguish from strong protein sequence
conservation in protein-coding regions.  Explanation of warnings: CONTIGEND -
Upstream region reached the end of a contig. NOUPSTREAM - There is no upstream
region (either another gene overlaps or immediately abuts, or the gene reaches
the very end of a contig) CONTAINSGAP - if there are a large number of n's
(user-defined but default is to warn if any N's are present). OTHERGENE - If
there is another gene within N nucleotides upstream of the query gene.
Automatically transposes the DNA and rotates it around so that it should be
possible to directly compare motifs...

Options:
  -h, --help            show this help message and exit
  -n NUMUPSTREAM, --numupstream=NUMUPSTREAM
                        Number of NT to go upstream (D = 100). For 'up to the
                        next gene' use a large number and do not specify -o
  -w GAPWARN, --gapwarn=GAPWARN
                        Number of N's in the upstream region before warning
                        about a gap (D = 1, warn if any Ns are present)
  -o, --allowgeneoverlap
                        If specified, always try to reach the number of
                        upstream nucleotides even if another called gene is
                        there (D: Cut it off with warning)
  -l OTHERGENELENGTH, --othergenelength=OTHERGENELENGTH
                        If allowing gene overlaps, still ignore called genes
                        less than this length (in nucleotides) within the
                        upstream region (D=0 - cut off after ANY gene)
  -g GC, --genecolumn=GC
                        Column number for gene ID in input, starting from 1
                        (D=1)
  -i INGENE, --ingene=INGENE
                        Number of nucleotides WITHIN the gene to gather in
                        addition to the upstream region (D=3 - i.e. grab the
                        start codon only)
*--------------------------------------------------------------------------------------------------------------------------*

db_listDbFiles.py

Usage: db_listDbFiles.py [options] ["searchstring_1" "searchstring_2" ... ] > filelist

List all files in the ITEP directories provided as part of this software
package. If searchstrings are provided, only returns those matching the search
strings.

Options:
  -h, --help            show this help message and exit
  -w MAXW, --maxw=MAXW  Maximum number of characters wide (D=Print each file
                        on its own line)
  -s, --simpleoutput    Force printing exactly one command per line, no other
                        formatting, overides -w (D=Print human readable
                        output)
*--------------------------------------------------------------------------------------------------------------------------*

db_makeClusterAlignment.py

Usage: db_makeClusterAlignment.py -m Method (-n|-t|-g|-p) [options] < Cluster_RunID > Final_alignment

Generates a new alignment from a piped-in pair of run\cluster ID

Options:
  -h, --help            show this help message and exit
  -r RC, --runcol=RC    Column number for run ID starting from 1 (D=1)
  -c CC, --clustercol=CC
                        Column number for cluster ID starting from 1 (D=2)
  -m METHOD, --alnmethod=METHOD
                        Method used to generate alignment (no default) Valid
                        methods: mafft_linsi,mafft_einsi,mafft_ginsi,mafft_def
                        ault,clustalw_default
  -n, --notrim          Do not trim alignment (no default)
  -t, --trimtomedian    Use svr script to trim to median ends (no default)
  -g, --gblocks_stringent
                        Use gblocks stringent criteria to trim (no default)
  -p, --gblocks_permissive
                        Use gblocks permissive criteria to trim (no default)
  -k, --noclean         Do not clean up temporary files (default: Delete them)
  -a, --addtodb         Add new alignment to the database (default: Do not add
                        it)
*--------------------------------------------------------------------------------------------------------------------------*

db_makeClusterComparisonTable.py

Usage: db_makeClusterComparisonTable.py [options] focus_gene < gene_ids > cluster_comparison_table

 Given a list of gene IDs and a focus gene, identifies all of the clusters
(across all cluster runs in the database) that contain the gene. Then
identifies if the genes in 'gene_ids' are identified in the same cluster as
the focus gene or not.  The output is a table with 1 if the gene is present
and 0 if it is not (some options  allow changing this to yes/no). An example
usage is to provide all genes in a broad cluster (low cutoff) and use this to
see how cutoff affects the clustering results. The evaluation is done for
every cluster run in which both genes are found.  Provided gene IDs can be
sanitized or unsanitized.

Options:
  -h, --help            show this help message and exit
  -n, --newick          Specify this if input is a Newick file and not a list
                        of gene IDs
  -g GC, --genecol=GC   Column number for gene ID in input starting from 1
                        (not valid with -n, D=1)
  -y, --yesno           Print yes and no instead of 1 and 0
  -f FILTER_RUNS, --filter_runs=FILTER_RUNS
                        Only include cluster runs matching the specified regex
  -a, --all             Instead of specifying a list of gene IDs, this will
                        print a table for ALL genes found in the same cluster
                        as the focus gene in at least one run.
*--------------------------------------------------------------------------------------------------------------------------*

db_makeClusterGraph.py

Usage:  db_makeClusterGraph.py -m method -u cutoff [options] < cluster_runid_pairs 

From a given cluster/runID pair, calcualte and export a GML file that can be
opened in Cytoscape or similar viewers to visualize the cluster. By default,
it creates GML files with name "runid_clusterid.gml" . If you specify your own
GML file you can only provide ONE cluster/runID pair. Currently implemented
methods: maxbit minbit avgbit normhsp loge selfbit otherbit

Options:
  -h, --help            show this help message and exit
  -m METHOD, --method=METHOD
                        Scoring method to use (REQUIRED)
  -u CUTOFF, --cutoff=CUTOFF
                        Scoring cutoff to use (REQUIRED)
  -r RC, --runcol=RC    Column number for Run ID starting from 1 (D:1)
  -c CC, --clusterid=CC
                        Column number for Cluster ID starting from 1 (D: 2)
  -n, --blastn          Use BLASTN instead of BLASTP for scoring results (D:
                        BLASTP)
*--------------------------------------------------------------------------------------------------------------------------*

db_makeGraphFromBlastResults.py

Usage:  db_makeGraphFromBlastResults.py -m method -u cutoff [options] < BLAST_results 

Generate a GML file for all edges in a BLAST results table. Currently
implemented methods: maxbit minbit avgbit normhsp loge selfbit otherbit

Options:
  -h, --help            show this help message and exit
  -m METHOD, --method=METHOD
                        Scoring method to use (REQUIRED)
  -u CUTOFF, --cutoff=CUTOFF
                        Scoring cutoff to use (REQUIRED)
  -o OUTFILE, --outfile=OUTFILE
                        Output GML file (REQUIRED)
*--------------------------------------------------------------------------------------------------------------------------*

db_makeNeighborhoodDiagram.py

No module named MySQLdb
Usage: db_makeNeighborhoodDiagram.py runid [options] < gene_ids

Saves neighborhood diagrams for genes in a specified directory. The run ID is
used to color code the neighborhood diagram.  The color code is not
necessarily consistent across different input genes but is internally
consistent for neighborhoods of a given gene.

Options:
  -h, --help            show this help message and exit
  -d DIRECTORY, --directory=DIRECTORY
                        Directory in which to save neighborhood diagrams.
                        Default is 'geneNeighborhoods'
  -l LABELTYPE, --labeltype=LABELTYPE
                        Type of label to use. Valid types are 'aliases' or
                        'clusterid' (D: aliases)
  -g GC, --genecol=GC   Column number for gene IDs starting from 1 (D: 1)
*--------------------------------------------------------------------------------------------------------------------------*

db_makeNeighborhoodTree.py

No module named MySQLdb
Usage: db_makeNeighborhoodTree.py -p protein_tree -r runid [options]

Generates a tree with gene regions

Options:
  -h, --help            show this help message and exit
  -r CLUSTERRUNID, --runid=CLUSTERRUNID
                        Run ID (required)
  -p TREEINFILE, --prottree=TREEINFILE
                        Protein tree (required)
  -t GENE, --treetitle=GENE
                        Tree title (D: same as run ID)
  -o OUTFILE, --outfile=OUTFILE
                        Base name for output file (D: Same as input tree)
  -d, --display         Display the resulting tree (D: Don't display, just
                        save)
  -c CUTOFF, --cutoff=CUTOFF
                        Number of members of a cluster below which a gene is
                        greyed out (D: 3 - 2 or less are greyed out)
  -l, --label           Add labels to the genes. The labels are the cluster
                        IDs for the clusters in which the genes are found in
                        the specified cluster run (D: Dont because its very
                        messy)
  --png                 Save high-quality PNG and SVG images (with base name
                        specified by -o or by default, with the same name as
                        input file)
*--------------------------------------------------------------------------------------------------------------------------*

db_replaceGeneNameWithAnnotation.py

Usage: db_replaceGeneNameWithAnnotation.py [options] < infile > outfile

Look for things that look like gene IDs (fig|#.#.peg.#) in the input file and
replace them with annotation and\or organism name, properly sanitized to work
in a Newick file. Also works if the input has sanitized gene IDs
(fig_#_#_peg_#) Replace with organism only: use -o Replace with annotation
only: use -a Replace with organism and annotation and keep original
(sanitized) gene id: use -a -o -k

Options:
  -h, --help      show this help message and exit
  -a, --annote    Include annotation (D: False)
  -o, --organism  Include organism as part of the annotation (D: False)
  -k, --keepgene  Keep (sanitized) gene ID as part of the annotation (D:
                  False)
*--------------------------------------------------------------------------------------------------------------------------*

db_TBlastN_wrapper.py

Usage: db_TBlastN_wrapper.py (-d|-f|-o) [options] < Protein_ids > Tblastn_table

Output: queryid, querylen, subcontig, organism, tblaststart, tblastend, tblastlen, queryoverlappct, evalue, bitscore, hitframe, 
                      strandedString, targetgeneid, targetannotation, targetgenelen, targetoverlappct, TBLASTN_hitID

Attempts to run TBLASTN and identify missing genes. It identifies called genes
that match the hit location and also tries to find genes on the opposite
strand that conflict.  Either you must specify the compiled contig database or
must have run ./setup_step3.sh and specify a single organism or list of
organism IDs against which to perform the BLAST.

Options:
  -h, --help            show this help message and exit
  -o ORG, --organism=ORG
                        Organism ID to BLAST against.
  -f ORGFILE, --orgfile=ORGFILE
                        File of organism IDs to BLAST against (use this option
                        if you want to test against multiple organisms
  -d DB, --db=DB        BLAST database to use for BLASTing (use this option if
                        you already have generated a blast database)
  -c CUTOFF, --cutoff=CUTOFF
                        E-value cutoff for TBLASTN (D=1E-5)
  -t TRANSLATION, --translation=TRANSLATION
                        Translation table number for TBLASTN (D=11 - bacteria,
                        archaea and plant plastids)
  -g GC, --genecol=GC   Column number for gene ID starting from 1 (D=1)
  -r OC, --orgcol=OC    Column number for organism ID starting from 1 (D=2, so
                        that it matches the organisms file; ignored unless -f
                        is specified)
  -a CALLEDGENEOVERLAP, --calledgeneoverlap=CALLEDGENEOVERLAP
                        Cutoff for overlap of called genes (D: 1% - if the
                        called gene overlaps with the hit with less than 1% of
                        its length it is ignored
  -k, --keep            Keep temporary files (D: Delete them)
*--------------------------------------------------------------------------------------------------------------------------*

fastaToPhylip.py

Usage: fastaToPhylip.py [options] < fasta_file > phylip file

Convert a fasta file to a phylip file

Options:
  -h, --help            show this help message and exit
  -c CONVFILE, --convfile=CONVFILE
                        File to convert new IDs back to original IDs (D =
                        don't save file)
*--------------------------------------------------------------------------------------------------------------------------*

FastTree_wrapper.py

Usage: FastTree_wrapper.py [options] < FASTA_file > Newick_file

Wrapper for FASTTREE to allow for global bootstrapping in addition to normal
functionality

Options:
  -h, --help            show this help message and exit
  -b NUMBOOTS, --bootstraps=NUMBOOTS
                        Number of bootstraps (D=none)
  -g, --globalboots     Perform global bootstrapping analysis. Requires Phylip
                        with SEQBOOT and CompareToBootstrap.pl from the
                        FASTTREE doc page (D:Local bootstrap only)
  -n, --nogamma         Do not apply gamma20 likelihood calculation
  -m MODEL, --model=MODEL
                        Specify model to use with FASTTREE (D=WAG)
  -p PROGRAM, --program=PROGRAM
                        Specify the name of the FASTTREE program to use - it
                        must be in your PATH (D=FastTreeMP)
  -t, --nucleotides     Set this flag if you are inputting a nucleotide
                        alignment (D = Protein alignment)
  -k, --keep            Keep temporary files (bootstrap files and phylip
                        files) (D = Delete them)
  -u NUMTHREADS, --numthreads=NUMTHREADS
                        Number of threads to use (By default we let FastTreeMP
                        decide how many to use)
*--------------------------------------------------------------------------------------------------------------------------*

Gblocks_wrapper.py

Usage: Gblocks_wrapper.py [options] < Fasta_alignment > Fasta_alignment_filtered

Run GBLOCKS with specified parameter values. GBLOCKS is a program to filter
low-quality sections out of a multiple alignment

Options:
  -h, --help            show this help message and exit
  -p PROGRAM, --program=PROGRAM
                        Name or location of your GBLOCKS program (D: Gblocks)
  -s, --usestrict       Use 'strict' values according to the cited paper
  -r, --userelaxed      Use 'relaxed' values according to the cited paper
                        (Default parameters correspond to this because the
                        paper claims it works better for shorter alignments)
  -c B1, --mincons=B1   Minimum Number Of Sequences For A Conserved Position
                        (D=9)
  -f B2, --minflank=B2  Minimum Number Of Sequences For A Flank Position (D=9)
  -n B3, --maxnoncons=B3
                        Maximum Number Of Contiguous Nonconserved Positions
                        (D=10)
  -m B4, --minblock=B4  Minimum Length Of A Block (D=5)
  -g B5, --gappos=B5    Allowable gaps (D=h, up to half gaps - must be h
                        (half), n (none), or a (any number))
*--------------------------------------------------------------------------------------------------------------------------*

getClusterFastas.py

Usage: getClusterFastas.py [options] fastafolder < cluster_info_file

Generate a FASTA file for each cluster present in the specified clusterinfo
file  (as generated from e.g. db_getClusterGeneInformation.py)  If cluster
info is not available (i.e. the file was generated from
db_getGeneInformation.py), it will generate a fasta file with the name
"NOCLUSTER_.fasta" with all of the sequences in the file.

Options:
  -h, --help         show this help message and exit
  -n, --nucleotides  Export nucleotide fasta files, not protein (D: Protein
                     fasta files)
*--------------------------------------------------------------------------------------------------------------------------*

getTreeLeafNames.py

No module named MySQLdb
Usage: getTreeLeafNames.py < tree.nwk > list_of_leaf_names

Given a Newick tree,  returns a list of leaf names in the tree

Options:
  -h, --help            show this help message and exit
  -f INFILE, --file=INFILE
                        Read single Newick tree from specified file (default:
                        -, stdin)
*--------------------------------------------------------------------------------------------------------------------------*

makeBlastScoreTable.py

Usage: makeBlastScoreTable.py -m method -c cutoff [options] < blast_result_table""

Output table: gene_1 gene_2 calculated_score

Given a blast score table (augmented with self-bit scores for query and target
genes),  calculates a similarity value based on the desired scoring metric.
Currently implemented metrics: maxbit minbit avgbit normhsp

Options:
  -h, --help            show this help message and exit
  -m METHOD, --method=METHOD
                        Method name
  -c CUTOFF, --cutoff=CUTOFF
                        Score cutoff to use
  -n, --noprint         Set this flag if you do not want to print edges less
                        than the cutoff as zeros (default = False - print
                        those edges)
*--------------------------------------------------------------------------------------------------------------------------*

makeCoreClusterAnalysisTree.py

No module named MySQLdb
Usage: makeCoreClusterAnalysisTree.py [options] newick_file runid

 Generate an ETE tree with internal node labels corresponding to the number of
clusters conserved in the nodes beneath it (conservation being defined by a
variery of options below). The input MUST be a Newick file with organism IDs
REPLACED with their names.  The function alternatively (or in addition)
exports a XLS file with sheet names equal to the node number printed on the
tree containing the cluster, runid pair and a representative annotation from
each cluster identified with these properties...

Options:
  -h, --help            show this help message and exit
  -d, --display         Display tree
  -v, --savesvg         Save tree as SVG (requires -b)
  -p, --savepng         save tree as PNG (implies -v, requires -b)
  -x, --savexls         Output lists of clusters for each tree to XLS (D:
                        Dont). Requires xlwt.
  -m, --save-multi-txt  Output lists of clusters for each tree to MANY tab
                        delimited files, names by the node number (D: Don't).
  -t, --savetxt         Output a lists of nodes and clusters for the tree to
                        ONE tab delimited file (D: Don't).
  -b BASENAME, --basename=BASENAME
                        Output file base name (D: automatically generated)
  -e, --no_annotation   Do NOT look up Representative Annotations (D: Look
                        them up)
  -r REROOT_ORG, --reroot=REROOT_ORG
                        Reroot tree to specified leaf before doing calculation
                        (D: Use tree as is)
  -a, --all             Count the clusters containing all of the descendent
                        leaves of each internal node. Only specifying this
                        option, the program ignores every leaf that is not a
                        descendent of the internal node.
  -u, --uniq            Count only those clusters with EXACTLY ONE member from
                        each descendent leaf (non-descendant leaves are
                        ignoerd).
  -s, --only            Count clusters only if every gene is a member of an
                        organism in a descendant node of the tree. (can be
                        combined with -a or -u)
  -n, --none            Count clusters only if there are NO representatives in
                        any descendent nodes from a given internal node (it
                        doesn't matter which other organisms are represented
                        in the cluster)
  -y, --any             Count clusters if they have representatives in ANY
                        descendent node from each internal node.
  -c, --clades          Instead of comparing these statistics to the whole
                        cluster run as an outgroup, restrict the outgroup to
                        the sister clade(s) of the tree.
*--------------------------------------------------------------------------------------------------------------------------*

makeHistorgram.py

Usage: makeHistorgram.py [options] < numeric_values > histogram_numbers

Calculates and prints as text the number of elements in each bin with
parameters specified (does not actually make a graph for you)

Options:
  -h, --help            show this help message and exit
  -c COLUMN, --column=COLUMN
                        Column number (start from 1) for numeric value
                        (default = 1)
  -s START, --start=START
                        Beginning of first bin to calculate histogram for
                        (default = min[numbers])
  -e END, --end=END     End of last bin to calculate histogram for (default =
                        max[numbers]
  -n NUMBER, --number=NUMBER
                        Number of bins (default = 10)
*--------------------------------------------------------------------------------------------------------------------------*

makePresenceAbsenceFasta.py

Usage: makePresenceAbsenceFasta.py < presence_absence_01_table > presence_absence_fasta_file

Create a presence/absence fasta file from a presence / absence 0-1 table

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

orthoMclWrapper.py

Usage: orthoMclWrapper.py -l mysql_loginname -p mysql_password -d mysql_database_string blastres [options]
orthoMclWrapper.py -f orthomcl_config_file blastres [options] 

   WARNING - This script is still a work in progress and is subject to random
failures. Most random failures are related   to issues with MySQL
configuration that cannot be fixed without priveleges. Follow the instructions
below to minimize the amount of pain.    You must have a 'orthomcl' MySQL
database set up before running this and have access to the login and password
info   for that datbase. The user (by default orthomcl) should have ability to
create, drop and edit tables on the orthomcl database.   You could also change
the config file to change the name of the orthomcl database. See OrthoMCL
documentation for details.    This script also requires having the orthomcl
binaries (in $ORTHOMCLROOT/bin) added to your PATH variable.    You must empty
the 'orthomcl' database for each different set of BLAST data you want to
analyse before calling   this function or it will not work correctly.    This
is a wrapper script for converting our data into a format in which it can be
run with OrthoMCL and then   running it with the specified settings. It
expects as input some set of BLAST results with ITEP gene IDs as queries and
targets.    The script essentially performs (in sequence) the steps specified
in the orthoMCL user guide but skips the ones that were   already done for
construction of the ITEP blast database, and reformats things so that they
will work with orthoMCL.    If redundant settings are present in the config
file and in the inputs, the settings in the config file are overridden by
the command line input and written to the file specified by -n (default:
orthomcl.new.config).    If the script crashes or is killed between when the
BLAST data is reformatted and when it is imported into the database,   you
will get a segfault from MCL. If this happens run this script with
--forcereload (-r)  - the error is related to    not having any data to
cluster becuase the data import failed.

Options:
  -h, --help            show this help message and exit
  -f CONFIGFILE, --configfile=CONFIGFILE
                        A previously-generated orthoMCL config file (Required
                        unless -l, -p, and -d are all specified)
  -n NEWCONFIGFILE, --newconfigfile=NEWCONFIGFILE
                        Name of new config file to create with command-line
                        settings (D: orthomcl.new.config)
  -l LOGIN, --login=LOGIN
                        Login name for MySQL (required if -f is not specified)
  -p PASSWORD, --password=PASSWORD
                        Password for MySQL (required if -f is not specified)
  -d DBSTRING, --dbstring=DBSTRING
                         Database string for the MySQL database (required if
                        -f is not specified).                             For
                        a central install it will look like this:
                        dbi:MySql:[database_name]
                        For a local install it will instead look like:
                        dbi:MySql:[database_name]:localhost:[port]
  -o ORTHOTABLE, --orthotable=ORTHOTABLE
                        Name of ortholog table to create in database (D:
                        Ortholog)
  -i INPARALOGTABLE, --inparalogtable=INPARALOGTABLE
                        Name of inparalog table to create in database (D:
                        InParalog)
  -t COORTHOLOGTABLE, --coortholog=COORTHOLOGTABLE
                        Name of co-ortholog table to create in database (D:
                        CoOrtholog)
  -e EVALCUT, --evalcut=EVALCUT
                        Cutoff for log-E value (int, D=-5 i.e. cut off if
                        E-value is bigger than 1E-5)
  -c PCTCUT, --pctcut=PCTCUT
                        Percent match cutoff for OrthoMCL (int, D=50, i.e.
                        cutoff if percent match is less than 50)
  -a INFLATION, --inflation=INFLATION
                        Inflation value for MCL (D: 1.5)
  -g LOGFILE, --logfile=LOGFILE
                        Orthomcl pairs Log file (D: Make a dummy name and
                        delete it afterwards)
  -r, --forcereload     Force reload of the database with BLAST results (D:
                        Only re-load if the reformatted BLAST info file is
                        newly created)
  -k, --keeptemp        Keep temporary files made by orthoMCL (D: Delete them
                        - except the new config file which is stored in the
                        filename specified by -n)
*--------------------------------------------------------------------------------------------------------------------------*

plotHeatmap.py

Usage: plotHeatmap.py [options] < Input_tsv

Generate a heat map for a tab-delimited input of numeric data. It comes with a
rich set of options. If row labels or column labels are present in the file
you must specify -w (row) or -o (column) or the tab-delimited file will fail
to parse. Labels are only actually put on the graph if the appropriate
dendrogram is desired (-r for row or -c for column). Distance method is passed
directly to scipy.spatial.distance.pdist() - see docs on that function for
details on valid parameters. Cluster method is passed directly to
scipy.cluster.hierarchy.linkage() - see docs on that function for details on
valid parameters. Color map is one of the colormaps recognized by pyplot - see
http://matplotlib.sourceforge.net/examples/pylab_examples/show_colormaps.html

Options:
  -h, --help            show this help message and exit
  -f OUTFILE, --outfile=OUTFILE
                        Name of output file (D: Just display graph on screen)
  -r, --rowdendrogram   Make a row dendrogram (D: Heatmap only)
  -c, --columndendrogram
                        Make a column dendrogram (D: Heatmap only)
  -w, --rowlabels       Specify this flag if the input file contains row
                        labels (D: Label by position in original file)
  -o, --columnlabels    Specify this flag if the input file contains column
                        labels (D: Label by position in original file)
  -d DISTANCEMETRIC, --distancemetric=DISTANCEMETRIC
                        Distance metric between rows\columns of the input
                        matrix (D: euclidean)
  -m CLUSTERMETHOD, --clustermethod=CLUSTERMETHOD
                        Clustering method to use (D:complete - complete-
                        linkage clustering)
  -a COLORMAPSCHEME, --colormapscheme=COLORMAPSCHEME
                        Color map coloring scheme to use (D: gray)
  -x MINSCORE, --minscore=MINSCORE
                        Minimum score to display on color map (D: Scale to
                        provided values)
  -y MAXSCORE, --maxscore=MAXSCORE
                        Maximum score to display on color map (D: Scale to
                        provided values)
*--------------------------------------------------------------------------------------------------------------------------*

plotScatters.py

Usage: plotScatters.py [options] < x,y

User interface to generate a single scatterplot. The default settings should
make a pretty nice plot but I provide easy-to-understand options to change
different aspects of the plot

Options:
  -h, --help           show this help message and exit
  --xcol=XCOL          Column number for x, starting from 1 (D = 1)
  --ycol=YCOL          Column number for y, starting from 1 (D = 2)
  --noshow             Do not display plot (displaying requires X server)
  --png=PNGOUT         Save plot as the specified file in png format
  --minx=MINX          Minimum value for x-axis (Default: Auto-estimate)
  --maxx=MAXX          Maximum value for x-axis (Default: Auto-estimate)
  --miny=MINY          Maximum value for y-axis (Default: Auto-estimate)
  --maxy=MAXY          Maximum value for y-axis (Default: Auto-estimate)
  --fontsize=FONTSIZE  Font size for axis labels (Default: 16)
  --xlog               Put x-axis on log scale (Default: Linear scale)
  --ylog               Put y-axis on log scale (Default: Linear scale)
  --xlabel=XLABEL      Label for X-axis (default: warning - no label
  --ylabel=YLABEL      Label for Y-axis (default: warning - no label
  --title=TITLE        Label for title (default: warning - no title
  --connect            If set, connect the dots, otherwise they're just
                       sepatate
  --connectdots        If set, connect dots and display the dots in addition
                       to the connecting line (implies --connect)
  --color=COLOR        Set color of dots (default: as chosen by matplotlib)
*--------------------------------------------------------------------------------------------------------------------------*

RaxML_wrapper.py

Usage: RaxML_wrapper.py [options] < FASTA_file > Newick_file

Wrapper for RAXML to take care of some nits (takes input in FASTA format and
does not discard existing gene names; takes care of putting in seed arguments
for you).

Options:
  -h, --help            show this help message and exit
  -b NUMBOOTS, --bootstraps=NUMBOOTS
                        Number of bootstraps (D=0)
  -T NTHREADS, --numthreads=NTHREADS
                        Number of threads, must be more than 1 (D=2)
  -k, --nocleanup       Set this flag to keep intermediate RAXML and PHYLIP
                        files (D=false, delete these files)
  -m MODEL, --model=MODEL
                        Specify model to use with RAXML (D=PROTGAMMAWAG)
  -p PROGRAM, --program=PROGRAM
                        Specify the name of the RAXML program to use (D
                        =raxmlHPC-PTHREADS)
  -c CONSELBASE, --conselfile=CONSELBASE
                        Specify a file name to use as a base for files needed
                        to run results with CONSEL. Overrides -k because afaik
                        RAXML does not one to run multiple algorithms in a
                        row...
*--------------------------------------------------------------------------------------------------------------------------*

replaceAliasesWithGeneNames.py

Usage: replaceAliasesWithGeneNames.py aliases file file_to_replace

Given a file containing aliased gene names, replaces those aliases with the
corresponding gene ID (e.g. fig|...). I used this to take GPRs from a model
(with corresponding locus tags) and translate them into a form usable in the
database. WARNING: This is a dumb script; anything that shouldnt be an alias
but that matches an alias (like 'for') will be replaced. I highly suggest
using this only for locus tags and making sure no other aliases match the
locus tags...

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

replaceGeneNamesWithAliases.py

Usage: replaceGeneNamesWithAliases.py (options) replacement_table < file > file_with_geneids_replaced

Replace one name of a gene with another name as given in a specified
replacement table

Options:
  -h, --help            show this help message and exit
  -n, --nooriginal      Set this flag to NOT keep the original name. To use
                        this the new aliases must be unique (D=False)
  -s NOSANITIZE, --nosanitize=NOSANITIZE
                        Set this flag to NOT sanitize the replacement names.
                        Sanitized characters do not include pipes or periods
                        so that this function can be used to put gene IDs in
                        without this function
  -d DELIMITERS, --delimiters=DELIMITERS
                        Regex that matches anything that separates your gene
                        IDs from other things in the string. Default is
                        whitespace, semicolons and commas.
*--------------------------------------------------------------------------------------------------------------------------*

replaceOrgWithAbbrev.py

Usage: replaceOrgWithAbbrev.py [options] < text_file > text_file_with_orgname

Replace organism IDs (fig|xx.yy) with organism abbreviations in a text file
(e.g. a newick file). Note the fig| is optional.

Options:
  -h, --help            show this help message and exit
  -f ORGFILE, --orgfile=ORGFILE
                        Organism file (optional, default = organisms file in
                        root directory of current install)
  -k, --keeppeg         Keep PEG ID? (if specified, keeps peg id. If not,
                        throws it away)
  -s, --sanitized       Specify this if the organism IDs are sanitized in the
                        file (fig_xx_yy instead of fig|xx.yy)
*--------------------------------------------------------------------------------------------------------------------------*

rerootTree.py

No module named MySQLdb
Usage:  rerootTree.py -l root_leaf_name < Newick_tree > Newick_tree_rerooted
rerootTree.py -p root_leaf_part < Newick_tree > Newick_tree_reroorted 

 Given a Newick file and either the name or part of the name of a leaf on
which to reroot the tree, reroots the tree and returns a rerooted Newick file
(does no further processing, unlike other scripts like db_displayTree). If
given a part of the name only, the match must be unique. If given the entire
name it must be present exactly as written in the tree.

Options:
  -h, --help            show this help message and exit
  -l LEAFNAME, --leafname=LEAFNAME
                        Leaf name on which to reroot (must exactly match the
                        text in a leaf name)
  -p LEAFPART, --leafpart=LEAFPART
                        PART of a leaf name on which to reroot. The string
                        must be part of exactly one of the leaf names.
*--------------------------------------------------------------------------------------------------------------------------*

Rpsblast_all_vs_one.py

Usage: Rpsblast_all_vs_one.py [options] target_db inputdir outputdir

Parallelize RPSBLAST by running each organism in the inputdir separately
against the same target database.

Options:
  -h, --help            show this help message and exit
  -n NUMCORES, --numcores=NUMCORES
                        Number of cores to use (D: 1)
  -e EXTENSION, --extension=EXTENSION
                        Extension for input fasta files (D: faa)
  -c CUTOFF, --cutoff=CUTOFF
                        E-value cutoff (D: 1E-5)
*--------------------------------------------------------------------------------------------------------------------------*

unsanitizeGeneIds.py

Usage: unsanitizeGeneIds.py < infile > outfile

Replace the gene IDs in infile from fig_\d+_\d+_peg_\d+ to fig|\d+.\d+.peg.\d+
(the former comes from some of the sanitation scripts)

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

getRepresentativesOfCluster.sh

Usage: getRepresentativesOfCluster.sh run_ID cluster_ID

Description: Given a run and cluster ID, identify representatives
according to the MyRAST function svr_representative_sequences.
WARNING: At the moment this is not a finished script and will likely be heavily
modified or removed.
*--------------------------------------------------------------------------------------------------------------------------*

phylipSeqbootScript.sh

USAGE: phylipSeqbootScript.sh phylip_file out_file N_replicates

DESCRIPTION: Wrapper script for Phylip's SEQBOOT package.
It has not been thoroughly tested.
*--------------------------------------------------------------------------------------------------------------------------*

clusterIdToTable.py

Usage: clusterIdToTable.py [clusterID1] [clusterID2] ... < runID > runID_clusterID_table

Given a RunID from stdin and cluster IDs as arguments, makes a table
duplicating the runID and adding the clusterID to each in a tab-delimited
table

Options:
  -h, --help  show this help message and exit
*--------------------------------------------------------------------------------------------------------------------------*

itepContigsToGenbankContigs.py

Usage: itepContigsToGenbankContigs.py -g genbankfile [options] > Conversion_table
itepContigsToGenbankContigs.py -o organismid [options] > Conversion_table
itepContigsToGenbankContigs.py -g genbankfile -o organismid > Conversion_table


 Get a conversion table from ITEP contig IDs to contig IDs in the provided
genbank file. The provided genbank file MUST have been modified using
addItepIdsToGenbank.py (or in the process of making tables e.g. with
convertGenabnk2Table.py) for the use of this function to make sense!

Options:
  -h, --help            show this help message and exit
  -g GENBANK, --genbank=GENBANK
                        Genbank file. If the name is [organismID].gbk you
                        don't need to specify an organism ID, otherwise you
                        must provide one in addition.
  -o ORGANISMID, --organismid=ORGANISMID
                        Organism ID. If only organism ID is provided, genbank
                        file location is assumed to be
                        $ITEPROOT/genbank/[organismid].gbk. If genbank file is
                        also identified, we will use that one instead and use
                        this organism ID to convert to ITEP contig IDs.
*--------------------------------------------------------------------------------------------------------------------------*

joinColumns.py

Usage: joinColumns.py [options] -1 col1 -2 col2 File1 File2

To get around some of the obnoxiousness of the UNIX join command... This is a
command to join on specific columns in two input files. It supports tabs as
delimiters and does not require inputs to be sorted (so it is slower than the
UNIX command but also easier to use). Does not munge columns - if --k2 is
specified and there are keys in the second column not present in the first, it
will put in the appropriate number of empty columns at the beginning of the
line (if --k1 is specified the appropriate number of empty columns are placed
at the end of the line) so that all columns have the same number of entries.

Options:
  -h, --help    show this help message and exit
  -1 FIRSTCOL   Column in first file starting from 1 (required)
  -2 SECONDCOL  Column in second file starting from 1 (required)
  -d DELIMITER  Delimiter (default: Tab)
  --k1          Keep non-matching rows in the first file (D: Only print
                matching rows)
  --k2          Keep non-matching rows in the second file (D: Only print
                matching rows)
*--------------------------------------------------------------------------------------------------------------------------*

makeTabDelimitedRow.py

Usage: makeTabDelimitedRow.py "cell_1" "cell_2" ... > Tab-delimited line
makeTabDelimitedRow.py -i [Input file] > Tab_delimited line

Turn all arguments (cell_1, cell_2, ...) into a single row separated by tabs

Options:
  -h, --help            show this help message and exit
  -i INFILE, --infile=INFILE
                        Combine all lines of the input file and separate them
                        by tabs. Use "-" for input from stdin
  -d DELIMITER, --delimiter=DELIMITER
                        Use other delimiter instead (D: Tabs)
*--------------------------------------------------------------------------------------------------------------------------*

transposeFile.py

Usage: transposeFile.py < delimited_file > transposed_delimited_file

Transpose all the stuff in a file (I wrote this to get around Excel's
shockingly small column limit)

Options:
  -h, --help  show this help message and exit

o----------------------------------------------------------------------------------------------------------o
|                                       CONVENIENCE SCRIPTS                                                |
o----------------------------------------------------------------------------------------------------------o

*--------------------------------------------------------------------------------------------------------------------------*

annotation2clustergeneinfo.sh


USAGE: ./annotation2clustergeneinfo.sh annotation run_ID > geneinfo_file

DESCRIPTION: Given a gene annotation,alias, or anything that is found in the
annotation (NOT a gene ID as given in the database), e.g. 'MA0001',
generates a geneinfo file for the cluster(s) containing matching genes

SEE ALSO ./geneid2clustergeneinfo.sh

DEPENDENCIES: The database must be loaded (with setup_step1.sh) and the specified run ID
must be one of the possible run IDs (from db_getAllClusterRuns.py).

*--------------------------------------------------------------------------------------------------------------------------*

completeCoreAnalysis.sh


USAGE: completeCoreAnalysis.sh runid rootorg [NTHREADS (optional)]
rootorg should have spaces replaced by underscores

DESCRIPTION: Performs common tasks needed to compute a core tree,
saving all intermediate files.

Completed tasks:
1. Computation of core gene clusters. Core gene clusters for purposes of
   this script are those with exactly one representative in each organism
   in the cluster run.
2. Generation of (protein) FASTA files for each of the core gene clusters.
3. Alignment with MAFFT (--auto)
4. Trimming with GBlocks (with the relaxed settings)
5. Concatination of the alignments
6. Treeing with FASTTREE (with local bootstraps as in the default)

This script can be run from anywhere and will create a lot of files so I suggest
running it from its own designated folder.

*--------------------------------------------------------------------------------------------------------------------------*

fasta2tree.sh


USAGE: fasta2tree.sh fasta_file outfile

DESCRIPTION: Given an un-aligned fasta file,
Performs the following standard steps to make
A newick file.

First, transforms the fasta file so that the ID
for the gene becomes the existing ID + all of the
annotations, removing all special characters.

Then runs MAFFT --auto and gblocks lenient.
Finally the script runs the FastTree wrapper with
100 global bootstraps.

IF you need more flexibility with settings,
use this script as a guide but replace it with the
programs you want.

*--------------------------------------------------------------------------------------------------------------------------*

geneid2clustergeneinfo.sh


USAGE: ./geneid2clustergeneinfo.sh gene_ID run_ID [alternate_base] > geneinfo_file

DESCRIPTION: Given a gene ID as given in the database (e.g. fig|83333.1.peg.1, the fig| is optional),
generates a geneinfo file for the cluster(s) containing matching genes

Optionally: specify an alternate base name for the file (default: the gene ID)

SEE ALSO ./annotation2clustergeneinfo.sh

DEPENDENCIES: The database must be loaded (with setup_step1.sh) and the specified run ID
must be one of the possible run IDs (from db_getAllClusterRuns.py). The gene ID must
also be the gene for one of the genes in the database. Failure results in an empty file.

*--------------------------------------------------------------------------------------------------------------------------*

geneinfo2tree.sh


USAGE: ./geneinfo2tree.sh geneinfo_file organism_file

DESCRIPTION: Given a geneinfo file (from db_getGeneInformation.py or
db_getClusterGeneInformation.py), uses MAFFT and FastTreeMP to compute
a tree of all the proteins in that gene info file.
MAFFT is allowed to automatically pick the optimal algorithm for alignment
while FastTree is used with -gamma and -wag

DEPENDENCIES: MAFFT, FastTreeMP

*--------------------------------------------------------------------------------------------------------------------------*

setUpCytoscapeTable.sh


USAGE: setUpCytoscapeTable.sh runid clusterid score_metric cutoff > table

DESCRIPTION: Create a BLAST score table for import into Cytoscape
from a specified cluster run using a specified scoring metric
